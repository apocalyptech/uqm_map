diff -ru uqm-0.6.2-vanilla/sc2/src/sc2code/uqmdebug.c uqm-0.6.2/sc2/src/sc2code/uqmdebug.c
--- uqm-0.6.2-vanilla/sc2/src/sc2code/uqmdebug.c	2006-12-23 04:26:09.000000000 -0600
+++ uqm-0.6.2/sc2/src/sc2code/uqmdebug.c	2007-02-10 17:10:32.000000000 -0600
@@ -76,7 +76,7 @@
 	// Informational:
 //	dumpEvents (stderr);
 //	dumpPlanetTypes(stderr);
-//	debugHook = dumpUniverseToFile;
+	debugHook = dumpUniverseToFile;
 			// This will cause dumpUniverseToFile to be called from the
 			// main loop. Calling it from here would give threading
 			// problems.
@@ -682,10 +682,10 @@
 	snprintf (buf, sizeof buf, "%s %s",
 			bodyColorString (STAR_COLOR(star->Type)),
 			starTypeString (STAR_TYPE(star->Type)));
-	fprintf (out, "%-22s  (%3d.%1d, %3d.%1d) %-19s  %s\n",
+	fprintf (out, "System\t%s\t(%d, %d)\t%s\t%s\n",
 			name,
-			star->star_pt.x / 10, star->star_pt.x % 10,
-			star->star_pt.y / 10, star->star_pt.y % 10,
+			star->star_pt.x,
+			star->star_pt.y,
 			buf,
 			starPresenceString (star->Index));
 
@@ -693,6 +693,32 @@
 }
 
 const char *
+elementTypeString (BYTE type)
+{
+	switch (type) {
+		case COMMON:
+			return "Common";
+		case CORROSIVE:
+			return "Corrosive";
+		case BASE_METAL:
+			return "Base Metal";
+		case NOBLE:
+			return "Noble";
+		case RARE_EARTH:
+			return "Rare Earth";
+		case PRECIOUS:
+			return "Precious";
+		case RADIOACTIVE:
+			return "Radioactive";
+		case EXOTIC:
+			return "Exotic";
+		default:
+			// Should not happen
+			return "???";
+	}
+}
+
+const char *
 bodyColorString (BYTE col)
 {
 	switch (col) {
@@ -850,7 +876,7 @@
 dumpPlanet (FILE *out, const PLANET_DESC *planet)
 {
 	(*pSolarSysState->GenFunc) (GENERATE_NAME);
-	fprintf (out, "- %-37s  %s\n", GLOBAL_SIS (PlanetName),
+	fprintf (out, "Planet\t%s\t%s\n", GLOBAL_SIS (PlanetName),
 			planetTypeString (planet->data_index & ~PLANET_SHIELDED));
 	dumpWorld (out, planet);
 }
@@ -879,7 +905,7 @@
 	{
 		typeStr = planetTypeString (moon->data_index & ~PLANET_SHIELDED);
 	}
-	fprintf (out, "  - Moon %-30c  %s\n",
+	fprintf (out, "Moon\tMoon %c\t%s\n",
 			'a' + (moon - &pSolarSysState->MoonDesc[0]), typeStr);
 
 	dumpWorld (out, moon);
@@ -889,14 +915,19 @@
 dumpWorld (FILE *out, const PLANET_DESC *world)
 {
 	PLANET_INFO *info;
+	COUNT minerals[NUM_ELEMENT_CATEGORIES];
+	COUNT i;
+	COUNT dangerousBio;
 	
 	if (world->data_index == (BYTE) ~0) {
 		// StarBase
+		fprintf(out, "          NoAttr\n");
 		return;
 	}
 	
 	if (world->data_index == (BYTE)(~0 - 1)) {
 		// Sa-Matra
+		fprintf(out, "          NoAttr\n");
 		return;
 	}
 
@@ -915,20 +946,34 @@
 
 	if (world->data_index & PLANET_SHIELDED) {
 		// Slave-shielded planet
+		fprintf(out, "          NoScan\n");
 		return;
 	}
 
-	fprintf (out, "          Bio: %4d    Min: %4d\n",
-			calculateBioValue (pSolarSysState, world),
+	fprintf (out, "          Bio: %d\tMin: %d\n",
+			calculateBioValue (pSolarSysState, world, &dangerousBio),
 			calculateMineralValue (pSolarSysState, world));
+	fprintf (out, "          Dangerous Bio: %d\n", dangerousBio);
+
+	generateMineralIndex (pSolarSysState, world, minerals);
+	for (i = 0; i < NUM_ELEMENT_CATEGORIES; i++)
+	{
+		//fprintf (out, "          %s Minerals: %d\n", elementTypeString(i), minerals[i]);
+		fprintf (out, "          %s Minerals: %d\n", GAME_STRING(CARGO_STRING_BASE + i + 2), minerals[i]);
+	}
+
+
 }
 
 COUNT
-calculateBioValue (const SOLARSYS_STATE *system, const PLANET_DESC *world)
+calculateBioValue (const SOLARSYS_STATE *system, const PLANET_DESC *world, COUNT *dangerousBio)
 {
 	COUNT result;
 	COUNT numBio;
 	COUNT i;
+	COUNT dangerLevel;
+	COUNT speedLevel;
+	COUNT typeLevel;
 
 	assert(system->pOrbitalDesc == world);
 	
@@ -937,12 +982,23 @@
 	numBio = system->CurNode;
 
 	result = 0;
+	*dangerousBio = 0;
 	for (i = 0; i < numBio; i++)
 	{
 		((SOLARSYS_STATE *) system)->CurNode = i;
 		(*system->GenFunc) (GENERATE_LIFE);
 		result += BIO_CREDIT_VALUE * LONIBBLE (CreatureData[
 				system->SysInfo.PlanetInfo.CurType].ValueAndHitPoints);
+
+		/* Now find out what's dangerous */
+		dangerLevel = (CreatureData[system->SysInfo.PlanetInfo.CurType].Attributes & DANGER_MASK) >> DANGER_SHIFT;
+		speedLevel = (CreatureData[system->SysInfo.PlanetInfo.CurType].Attributes & SPEED_MASK) >> SPEED_SHIFT;
+		typeLevel = (CreatureData[system->SysInfo.PlanetInfo.CurType].Attributes & BEHAVIOR_MASK) >> BEHAVIOR_SHIFT;
+		if (typeLevel == BEHAVIOR_HUNT && speedLevel > 1 && dangerLevel > 1)
+		{
+			(*dangerousBio) += BIO_CREDIT_VALUE * LONIBBLE (CreatureData[
+					system->SysInfo.PlanetInfo.CurType].ValueAndHitPoints);
+		}
 	}
 	return result;
 }
diff -ru uqm-0.6.2-vanilla/sc2/src/sc2code/uqmdebug.h uqm-0.6.2/sc2/src/sc2code/uqmdebug.h
--- uqm-0.6.2-vanilla/sc2/src/sc2code/uqmdebug.h	2006-12-23 04:26:09.000000000 -0600
+++ uqm-0.6.2/sc2/src/sc2code/uqmdebug.h	2007-02-10 16:49:49.000000000 -0600
@@ -92,6 +92,8 @@
 // Describe one star system.
 void dumpSystem (FILE *out, const STAR_DESC *star,
 		const SOLARSYS_STATE *system);
+// Get an element type as a string
+const char *elementTypeString (BYTE type);
 // Get a star color as a string.
 const char *bodyColorString (BYTE col);
 // Get a star type as a string.
@@ -112,7 +114,7 @@
 		const PLANET_DESC *world, COUNT minerals[]);
 // Calculate the total value of all bio on a world.
 COUNT calculateBioValue (const SOLARSYS_STATE *system,
-		const PLANET_DESC *world);
+		const PLANET_DESC *world, COUNT *dangerousBio);
 // Determine how much of each mineral type is present on a world
 void generateBioIndex(const SOLARSYS_STATE *system,
 		const PLANET_DESC *world, COUNT bio[]);
